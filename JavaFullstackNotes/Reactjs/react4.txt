React project structure and work flow
======================================
myapp1
|
|----node_modules
|
|----public
|	|
	|---index.html
	|---manifest.json
	|---favicon.ico 

|-----src
	|
	|---index.js
	|---index.css
	|
	|---App.js
	|---App.css
	|---App.test.js
	
|
|---package.json 
|---README.md

A "node_modules" contains packages and dependencies installed.

A "index.html" is a main template of react application.

A "manifest.json" file contains metadata which is used when web application installed in
user's computer or laptop or mobile.

A "favicon.ico" is a favourite icon.

A "App.css" file is related to App.js and it is global.

A "App.js" is a parent component.

A "App.test.js" file is for unit testing.

A "index.css" file is releated to index.js and it is global.

A "index.js" is a entry point.

A "package.json" file contains dependencies which we used in our project along with their version.


ex:		
		 loads to 		render to 			output
	App.js ------------> index.js --------------> index.html -----------------> Browser  

Second react project development
===============================
myapp2
|
|----node_modules
|
|----public
|	|
	|---index.html
	|---manifest.json
	|---favicon.ico 

|-----src
	|
	|---index.js
	|
	|---App.js 
	
|
|---package.json 
|---README.md

step1:
------
	Create a react project i.e myapp2.
	ex:
		Reactprojects> npx  create-react-app  myapp2

step2:
-----
	Open VSC code editor.
	ex:
		Reactprojects> code . 	

step3:
------
	Switch to the project.
	ex:
		Reactprojects> cd  myapp2

step4:
-----
	Run the react project.
	ex:
		Reactprojects/myapp2> npm start 


step5:
------
	Goto App.js and perform following changes.


App.js
------
function App()
{
  return (

      <h1> Welcome to Second React Application </h1>
  )
}
export default App;

step6:
------	
	Goto index.js file and perform following changes.

index.js
--------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();





React Fragment
==============
By default react components can return only one element at a time.

To return more then one element we need to use React Fragment.

â€‹React Fragment allows us to return multiple elements from a React component by allowing us to group a list of children without adding extra nodes to the DOM.

ex:1
----

App.js
------
import React from 'react';
function App()
{
  return (
      <React.Fragment>
        <h1> First Element </h1>
        <h1> Second Element </h1>
      </React.Fragment>
  )
}
export default App;

ex:2
-----

App.js
-------
import {Fragment} from 'react';
function App()
{
  return (
      <Fragment>
        <h1> First Element </h1>
        <h1> Second Element </h1>
      </Fragment>
  )
}
export default App;


ex:3
-----
function App()
{
  return (
      <>
        <h1> First Element </h1>
        <h1> Second Element </h1>
      </>
  )
}
export default App;


Components
==========
A component is a building block of react application.

Components allows us to split our UI into reusable independent pieces.
ex:
	<Table> , <Header> , <Footer> , <Section> and etc.

Components are like javascript functions because they take arbitary inputs like props and return react elements to describe what should appear on the screen.

In React , component name must and should starts with uppercase letter.

There are two ways to declare react components.

1) Function component / Functional component

2) Class component 




































