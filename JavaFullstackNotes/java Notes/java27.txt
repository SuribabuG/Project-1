constructor overloading
=====================
Having same constructor name with different parameters in a single class is called constructor overloading.

ex:
---
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}

this keyword
============
A "this" keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables

2) To refer current class methods 

3) To refer current class constructors 


1) To refer current class variables
------------------------------------
class A 
{
	int i=10;
	int j=20;
	A(int i,int j)
	{
		System.out.println(i+" "+j); // 100   200 
		System.out.println(this.i+" "+this.j); // 10   20
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(100,200);
	}
}

2) To refer current class methods 
---------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
	}
}

3) To refer current class constructors 
---------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(10.5d);
	}
}

super keyword
==============
A "super" keyword is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables 

2) To refer super class methods 

3) To refer super class constructors 


1) To refer super class variables 
----------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A 
{
	int i=100;
	int j=200;
	B(int i,int j)
	{
		System.out.println(this.i+" "+this.j); // 100   200
		System.out.println(super.i+" "+super.j); //10   20
		System.out.println(i+" "+j); // 1000 2000
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);
	}
}

2) To refer super class methods 
------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
		b.m2();
	}
}

3) To refer super class constructors 
-------------------------------------
class A 
{
	A()
	{
		System.out.println("A-const");
	}
}
class B extends A 
{
	B()
	{
		super();
		System.out.println("B-const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
	}
}

interface
==========
Interface is a collection of zero or more abstract methods.

Abstract method is a incomplete method because it ends with semicolon and does not have any body.
ex:
	void methodOne();

It is not possible to create object for interfaces.

To write the implementation of abstract methods we will use implementation class.

It is possible to create object for implementation class because it contains method with body.

By default every abstract method is a public and abstract.

Interface contains only constants i.e public static final.

syntax:
------
	interface  interface_name
	{
		-
		- //abstract methods 
		- //constants 
		-
	}
Note:
-----
If we know only service requirement specification then we need to use interface.

Diagram: java27.1



ex:1
---
interface A 
{
	//abstract method
	public abstract void m1();
}
class B implements A 
{
	//override
	public void m1()
	{
		System.out.println("M1-Method");
	}
	
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}

ex:2
-----
interface A 
{
	//abstract method
	public abstract void m1();
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we need to override all methods otherwise we will get compile time error.

ex:
interface A 
{
	//abstract methods 
	public abstract void see();
	public void show();
	abstract void view();
	void display();
}
class B implements A 
{
	public void see()
	{
		System.out.println("see-method");
	}
	public void show()
	{
		System.out.println("show-method");
	}
	public void view()
	{
		System.out.println("view-method");
	}
	public void display()
	{
		System.out.println("display-method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.see();
		a.show();
		a.view();
		a.display();
	}
}

A class can't extends more then one class but interface can extends more then one interface.

ex:
--
interface A 
{
	void m1();
}
interface B
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		D d=new D();
		d.m1();
		d.m2();
		d.m3();
	}
}

A class can implements more then one interface.

ex:
---
interface Father 
{
	double HT=6.2d;
	void height();
}
interface Mother
{
	double HT=5.8d;
	void height();
}
class Child implements Father,Mother 
{
	public void height()
	{
		double height=(Father.HT+Mother.HT)/2;
		System.out.println("Child Height is ="+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}

Note:
------
According to Java 8 , interface is a collection of abstract methods, default methods and static methods.


Abstract class
===============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A abstract keyword is applicable for class and method but not for variables.

It is not possible to create object for abstract class.

To write the implementation of abstract methods we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
	abstract class class_name
	{
		-
		- //abstract methods 
		- //concrete methods 
		- //instance variables
		-
	}

Note:
-----
If we know partial implementation then we need to use abstract class.

ex:
----
abstract class Plan 
{
	protected double rate;
	
	//abstract method 
	public abstract void getRate();
	
	//concrete method
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill :"+(rate*units));
	}
}
class DomesticPlan extends Plan
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan 
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);
		
		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}


Abstraction example
====================
abstract class Animal
{
	public abstract void makeSound();
}
class Dog extends Animal
{
	public void makeSound()
	{
		System.out.println("Boow! Boow!");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Dog d=new Dog();
		d.makeSound();
	}
}

Q) What is the difference between interface and abstract class?

interface					abstract class
---------------					--------------
To declare interface we will use interface 	To declare abstract class we will use abstract
keyword.					keyword.

It is a collection of abstract methods,		It is a collection of abstract methods and 
default methods  and static methods.		concrete methods.

It contains constants.				It contains instance variables.

We can achieve multiple inheritance.		We can't achieve multiple inheritance.

It does not allow constructors.			It allows constructors.

It does not allow blocks.			It allows blocks.

To write the implementation of abstract methods	To write the implementation of abstract methods 
we will use implementation class.		we will use sub classes.

If we know only specification then we need to	If we know partial implementation then we need to
use interface.					use abstract class.











































