Recursion
===========
A method which call itself for many number of times is called recursion.

Recursion is similar to loopings.

Whenever we use recursion then we should not use loops.


Q) Write a java program to display 10 natural numbers without using loops?

class Test  
{
	public static void main(String[] args) 
	{
		//caller method
		display(1);
	}
	//callie method
	public static void display(int i)
	{
		if(i<=10)
		{
			System.out.print(i+" ");
			display(i+1);
		}
		
	}
}


Q) Write a java program to perform sum of two numbers without using arithmetic operator ?

ex:
---

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt();
		
		System.out.println("Enter the second number :");
		int b=sc.nextInt();
		
		//caller method
		System.out.println(sum(a,b));
	}
	//callie method
	public static int sum(int a,int b)
	{
		if(a==0)
			return b;
		
		return sum(--a,++b);
	}
}


Q) Write a java program to find out factorial of a given number using recursion?

ex:
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();//5
		
		//caller method
		System.out.println(factorial(n));
	}
	//callie method
	public static int factorial(int n)
	{
		if(n<0)
			return -1;
		if(n==0)
			return 1;
		
		return n*factorial(n-1);
	}
}


Q) Write a java program to find out N-th element of fibonacci series?

fibonacci sequence : 0 1 1 2 3 5 8 

Input:
	4

Output:
	2

ex:
---
import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the number :");
		int n=sc.nextInt();//4
		
		//caller method
		System.out.println(fib(n));
		
	}
	//callie method 
	public static int fib(int n)
	{
		if(n==0 || n==1)
			return 0;
		if(n==2)
			return 1;
		
		return  fib(n-1)+fib(n-2);
			
	}
}


Arrays
=======
Array is a collection of homogeneous data elements.

The main advantages of arrays are 

1) We can represent multiple elements using single variable name.
   ex:
	int[] arr={10,20,30};

2) Performance point of view arrays are recommanded to use.


The main disadvantages of arrays are 

1) Arrays are fixed in size.Once if we create an array there is no chance of increasing or decreasing the size of an array.

2) To use array concept in advanced we should known what is the size of an array which is always not possible.

In java, arrays are divided into three types.

1) Single Dimensional Array 

2) Double Dimensional Array 

3) Multi Dimensional Array 


Array Declaration
------------------
At the time of array declaration we should not specify array size.

ex:
					Array
		|---------------------------------|--------------------------|
	Single Dimensional Array	Double Dimensional Array	MultiDimensional Array
		
	int[] arr;			int[][] arr;			int[][][] arr;
	int  []arr;			int [][]arr;			int  [][][]arr;
	int  arr[];			int arr[][];			int  arr[][][];
					int[]  []arr;			int[] [][]arr;
					int[]  arr[];			int[] arr[][];
					int  []arr[];			int[] []arr[];
									int[][] []arr;
									int[][] arr[];
									int  [][]arr[];
									int  []arr[][];	

Array Creation
--------------
In java , every array consider as an object.Hence we will use new operator to create an array.

ex:
	int[] arr=new int[3];

Diagram: class18.1

Rules to constructor an array
-----------------------------
Rule1:
-----
	At the time of array creation compulsary we need to specify array size.
	ex:
		int[] arr=new int[3];
		int[] arr=new int[]; // C.T.E array dimension missing 

Rule2:
------
	It is legal to have an array size with zero.
	ex:
		int[] arr=new int[0];
		System.out.println(arr.length);//0

Rule3:
------
	We can't give negative number as an array size otherwise we will get 
	NegativeArraySizeException.
	ex:
		int[] arr=new int[-3]; //R.E NegativeArraySizeException 


Rule4:
-----
	The allowed datatype for an array size is byte,short,int and char. 
	If we take other datatypes then we will get compile time error.
	ex:
		byte b=10;
		int[] arr=new int[b];


		int[] arr=new int['a'];

		
		int[] arr=new int[10.5d]; // C.T.E 


Rule5:
-----
	The maximum size we can take for an array size is maximum length of int.
	ex:
		int[] arr=new int[2147483647];

Array Initialization
--------------------
Whenever we create an array , every array element will be initialized with default values.

If we are not happy with default values then we can change those values with customized values.

Diagram: java18.2



Array Declaration , Creation and Initialization using  single line
-------------------------------------------------------------------
	int[] arr;
	arr=new int[3];
	arr[0]=10;	
	arr[1]=20;
	arr[2]=30;	==>	int[] arr={10,20,30};
				char[] carr={'a','b','c'};
				String[] sarr={"hi","hello","bye"};


Q) What is the difference between length and length() ?

length						length()
------------					-----------
It is a final variable which is applicable	It is a final method which is applicable 
only for arrays.				only for String objects.

It will return size of an array.		It will return number of characters present in
					 	string.

ex:						ex:
--						---
	int[] arr=new int[3];				String str="bhaskar";
	System.out.println(arr.length);//3		System.out.println(str.length());//7



Single Dimensional Array
=======================

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr=new int[3];
		
		//for each loop
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
		
	}
	
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr=new int[3];
		arr[0]=10;
		arr[1]=20;
		arr[2]=30;
		
		//for each loop
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
		
	}
	
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={10,20,30};
		
		//for each loop
		for(int i:arr)
		{
			System.out.print(i+" ");
		}
		
	}
	
}

Note:
------
	For each loop is used to iterate the elements from array.


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={10,20,30};
		
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
		
	}
	
}





































































































































































































 