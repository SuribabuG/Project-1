A try with multiple catch blocks
================================
A try block can have multiple catch blocks.

If a try block contains multiple catch blocks then order of catch blocks is very important .It should be from child to parent but not from parent to child.

ex:
--
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);	
		}
		catch (ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RE");
		}
		catch(Exception e)
		{
			System.out.println("From E ");
		}
	}
}


Various methods to display the exception details
=================================================
Throwable class defines following three methods to display exception details.

1) printStackTrace()
--------------------
It will display name of the excepiton ,description of the exception and line number of 
the exception.

2) toString()
-----------
It will display name of the exception and description of the exception.

3) geMessage() 
-------------
It will display description of the exception.

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);	
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();
			
			System.out.println("==================");
			
			System.out.println(ae.toString());
			
			System.out.println("==================");
			
			System.out.println(ae.getMessage());
		}

	}
}


finally block
==============
It is never recommanded to maintain cleanup code in try block because if any exception raise in try block then try block won't be executed.

It is never recommanded to maintain cleanup code in catch bock because if there is no exception in try block then catch won't be executed.

But we need a place where we can maintain cleanup code and it should execute irrespective of exception raised or not.Such block is called finally block.

syntax:
------
	try
	{
		-
		- //Risky Code 
		-
	}
	catch(Exception e )
	{
		-
		- //Error Handling Code 
		-
	}
	finally
	{
		-
		- //cleanup code 
		-
	}

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");	
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}
o/p:
	try-block
	finally-block

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);	
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}

o/p:
java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:7)
finally-block


ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
			System.out.println(10/0);	
			System.out.println("stmt");
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}
o/p:
try-block
java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:8)
finally-block


A try with finally combination is valid in java.

ex:
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}

	}
}

Q) What is difference between final, finally and finalize method?

final
-----
A final is a modifier which is applicable for variables, methods and classes.
If we declare any variable as final then reassignment of that variable is not possible.
If we declare any method as final then overriding of that method is not possible.
If we declare any class as final then creating child class is not possible.


finally
-------
It is a block which contains cleanup code and it will execute irrespective of exception raise or not.


finalize
--------
It is a method called by garbage collector just before destroying an object for cleanup activity.

throw statement
===============
Sometime we will create exception object explicitly and handover to JVM manually by using throw statement.
ex:
	throw  new ArithmeticException("Don't divide by zero");

ex:
class  Test 
{
	public static void main(String[] args) 
	{
		throw new ArithmeticException("Don't divide by zero");
	}
}


throws statement
===============
If any checked exception raised in our program we must and should handle that exception by using try and catch block or by using throws statement.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java ");	
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) throws InterruptedException
	{
		
			Thread.sleep(5000);
			System.out.println("Welcome to Java ");	
		
	}
}


2) Userdefined exception
=======================
Exception which are created by the user based on the application requirements are called userdefined exceptions or customized exceptions. 

ex:
	NoPracticeException
	NoInterestInJavaException
	NoMoneyToEnjoyException
	TooYoungException
	TooOldException 

ex:

import java.util.Scanner;
class TooYoungException extends RuntimeException 
{
	TooYoungException(String message)
	{
		super(message);
	}
}
class TooOldException extends RuntimeException 
{
	TooOldException(String message)
	{
		super(message);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();
	
		if(age<18)
			throw new TooYoungException("U r not eligible to vote");
		else
			throw new TooOldException("U r eligible to vote");
	}
}


































