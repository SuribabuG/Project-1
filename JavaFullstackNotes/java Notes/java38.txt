java.util package
=================

Q) What is the difference between Arrays and Collections?

Arrays						Collections
--------------					---------------
It is a collection of homogeneous data 		It is a collection of homogeneous and 
elements.					hetrogeneous data elements.

It is fixed in size.				It is growable in nature.

Performance point of view arrays are 		Memory point of view Collections are 
recommanded to use.				recommanded to use.

It can hold primitive types and object types.	It holds only object types.

Arrays not implemented based on data structure	Collections are implemented based on data structure 
concept so we can't expect any readymade 	concept so we can expect readymade methods.
methods.


Collection Framework
====================
Collection Framework defines several utility classes and interfaces to represent group of objects in a single entity.


Collection
===========
Collection is an interface which is present in java.util package.

It is a root interface for entire Collection Framework.

If we want to represent group of individual objects in a single entity then we need to use Collection.

Collection interface contains following methods which are available for entire Collection objects.

ex:
	cmd> javap   java.util.Collection 

	add()
	remove()
	removeAll()
	addAll()
	contains()
	containsAll()
	retainAll()
	clear()
	and etc.


List
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: java38.1


ArrayList
-------------
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

If our frequent operation is a retrieval operation then ArrayList is a best choice.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		al.add(10);
		System.out.println(al); //[one,two,three,one,10]
		al.add(null);
		System.out.println(al); //[one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		al.add(null);
		System.out.println(al); //[one,two,three,one,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		System.out.println(al.isEmpty()); // false

		for(int i=0;i<al.size();i++)
		{
			System.out.println(al.get(i));
		}
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		System.out.println(al.contains("two")); //true 
		
		al.remove("two");
		
		System.out.println(al);//[one,three]
		
		al.clear();
		
		System.out.println(al); //[]
	}
}

ex:
====
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=new ArrayList<String>();
		list.add("one");
		list.add("two");
		list.add("three");
		System.out.println(list);//[one,two,three]
		
		list.add(0,"gogo");
		
		System.out.println(list);//[gogo,one,two,three]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=Arrays.asList("one","two","three","four");
		System.out.println(list);
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(4,2,7,1);
		System.out.println(list);
	}
}


LinkedList 
============
The underlying data structure is doubly LinkedList.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and Deque interface.

If our frequent operation is adding and removing the elements in middle then LinkedList is a best choice.

LinkedList interface contains following methods.

ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		ll.add(10);
		System.out.println(ll);//[one,two,three,one,10]
		ll.add(null);
		System.out.println(ll);//[one,two,three,one,10,null]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		
		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo,one,two,three,jojo]
		
		System.out.println(ll.getFirst());//gogo
		System.out.println(ll.getLast());//jojo
		
		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1=new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1);//[one,two,three]
		
		LinkedList<String> ll2=new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2); //[raja]
		
		ll2.addAll(ll1);
		System.out.println(ll2);//[raja,one,two,three]
		
		System.out.println(ll2.containsAll(ll1)); //true 
		
		ll2.removeAll(ll1);
		System.out.println(ll2); // [raja]
	}
}





















































