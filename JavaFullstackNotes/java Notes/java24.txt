Data Hiding
===========
The process of hiding object data from the outsider is called data hiding.

The main objective of data hiding is to provide security.

Using "private" modifier we can implements data hiding concept.

ex:
---
class Account 
{
	private double balance=5000d;
}
class Test
{
	public static void main(String[] args)
	{
		Account account=new Account();
		System.out.println(account.balance); 
	}
}


Abstraction
============
Hiding internal implementation and highlighting the set of services is called abstraction.

Using abstract classes and interfaces we can implements abstraction.

The best example of abstraction is GUI ATM machine where bank people will hide internal implementation and highlights the set of services like banking, withdrawl, mini statement and etc.

The main advatages of abstraction are 

1) It gives security because it will hide internal implementation from outsider.

2) Enhancement becomes more easy without effecting enduser they can perform any changes in our internal system.

3) It provides flexibility to the enduser to use the system.

4) It improves maintainability of an application.

In realtime we will use abstraction to hide the data.


Encapsulation
==============
The process of encapsulating or grouping variables and it's associate methods in a single unit is called encapsulation.

Diagram: java24.1

In realtime encapsulation is used to protect the data.

A class is said to be encapsulated class if it supports data hiding and abstraction.

In encapsulation for every variable we need to write setter and getter method.

Diagram: java24.2

The main advantages of encapsulation are.

1) It gives security.

2) Enhancement becomes more easy.

3) It provides flexibility to the enduser.

4) It improves maintainability of an application.

The main disadvantage of encapsulation is , it will increase length of our code and slowdown the 
execution process.


ex:
----
class  Student
{
	private int studId;
	private String studName;
	private double studFee;
	
	//setter methods
	public void setStudId(int studId)
	{
		this.studId=studId;
	}
	public void setStudName(String studName)
	{
		this.studName=studName;
	}
	public void setStudFee(double studFee)
	{
		this.studFee=studFee;
	}
	
	//getter methods
	
	public int getStudId()
	{
		return studId;
	}
	public String getStudName()
	{
		return studName;
	}
	public double getStudFee()
	{
		return studFee;
	}
	
}

class Test 
{
	public static void main(String[] args)
	{
		Student s=new Student();
		
		s.setStudId(101);
		s.setStudName("Alan");
		s.setStudFee(1000d);
		
		System.out.println("Student Id :"+s.getStudId());
		System.out.println("Student Name :"+s.getStudName());
		System.out.println("Student Fee :"+s.getStudFee());
	}
}




Q) What is the difference between Abstraction and Encapsulation?

Abstraction					Encapsulation
-----------					----------------
Hiding internal implementation and highlighting The process of encapsulating or grouping variables
the set of services is called abstraction.	and its associate methods in a single unit is
						called encapsulation.	

It is used to hide the data.			It is used to protect the data.

Using abstract classes and interfaces we can 	Using access modifiers we can implements
implements abstraction.				encapsulation.
						
It is a process of gaining the information.	It is a process of containing the information.

It solves an issue at design level.		It solves an issue at implementation level.



Q) What is the difference beteen POJO and Java Bean class?

POJO						Java Bean
----------					-------------
It canâ€™t be serialized.				It can be serialized.

Fields can have any visibility.			Fields can have only private visibility.

There may or may not have 0-arg constructor.	It must have 0-argument constructor.

It does not extend any other class.		It can extends.

It does not implement any other interface.	It can implements.

It does not use any outside annotation.		It uses outside annotation.



Java bean example
--------------------
class  Student implements java.io.Serializable 
{
	private int studId;
	private String studName;
	private double studFee;
	
	//zero-argument constructor
	Student()
	{
		System.out.println("0-arg const");
	}
	
	//setter methods
	public void setStudId(int studId)
	{
		this.studId=studId;
	}
	public void setStudName(String studName)
	{
		this.studName=studName;
	}
	public void setStudFee(double studFee)
	{
		this.studFee=studFee;
	}
	
	//getter methods
	
	public int getStudId()
	{
		return studId;
	}
	public String getStudName()
	{
		return studName;
	}
	public double getStudFee()
	{
		return studFee;
	}
	
}


Is-A relationship 
=================
Is-A relationship is also known as inheritance.

Using "extends" keyword we can implements Is-A relationship.

The main objective of Is-A relationship is to provide reusability.

ex:
---
class  Honda 
{
	public void price()
	{
		System.out.println("Honda-price method");
	}
}
class HondaAmaze extends Honda 
{
	public void model()
	{
		System.out.println("HondaAmaze-Model method");
	}
}
class Customer 
{
	public static void main(String[] args)
	{
		Honda h=new Honda();
		h.price();  //Honda-price method
		
		HondaAmaze ha=new HondaAmaze();
		ha.price(); //Honda-price method
		ha.model(); //HondaAmaze-Model method
		
		Honda h1=new HondaAmaze();
		h1.price(); // Honda-price method
		
		HondaAmaze ha1=new Honda(); //invalid 
	}
}

conclusion
---------
Whenever our parent having properties bydefault it comes to child.But whatever our child is having properties it never goes back to parent.

A parent reference can hold child object but child reference can't hold parent object.














































































































