Operators
==========
Operator is a symbol which is used to perform some operations on operands.
ex:
	c = a + b ;

	Here = and + are operators 
	Here a,b and c are operands 

It can be arithmetic operation, logical operation, bitwise operation and etc.

We have following list of operators in java.

1) Assignment operators

2) Ternary/Conditional operators 

3) Logical operators 

4) Bitwise operators 

5) Arithmetic operators 

6) Relational operators 

7) Shift operators 

8) Unary operators 

1) Assignment operators
-----------------------

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); // 30
	}
}

Note:
-----
	Variable reinitialization is possible in java.


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		final int i=10;
		
		i=20;
		
		i=30;
		
		System.out.println(i); // C.T.E 
	}
}
o/p:
	C.T.E : cannot assign a value to final variable


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=1,2,3,4,5;
		System.out.println(i); //C.T.E 
	}
}
o/p:
	C.T.E : Identifier expected 


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i,j;
		i=j=1,2;
		System.out.println(i+" "+j); // C.T.E 
	}
}
o/p:
	C.T.E : semicolon expected 



ex:
---
class Test  
{
	//global variable
	static int i=10;
	
	public static void main(String[] args) 
	{
		//local variable 
		int i=20;
		
		System.out.println(i); // 20
	}
}

Note:
----
	Here priority goes to local variable.


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i+=4; // i = i + 4
		
		System.out.println(i); //14
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i-=45; // i = i - 45 
		
		System.out.println(i); // -35
	}
}


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i*=6;
		
		System.out.println(i); // 60
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i/=4;
		
		System.out.println(i); // 2
		
		
		int j=10;
		
		j/=20;
		
		System.out.println(j); // 0
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		i%=4;
		
		System.out.println(i); // 2
		
		
		int j=10;
		
		j%=20;
		
		System.out.println(j); // 10
	}
}

2) Ternary/Conditional operators
-------------------------------
syntax:
------
	(condition)?value1:value2;

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=(true)?1:0;
		System.out.println(i);//1
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String s=(false)?"It is true":"It is false";
		System.out.println(s);//It is false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b=(5>2)?true:false;
		System.out.println(b);//
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		char ch=(5>20)?'t':'f';
		System.out.println(ch);// f 
	}
}

Q) Write a java program to find out greatest of two numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt();  // 20
		
		System.out.println("Enter the second number :");
		int b=sc.nextInt();  // 30
		
		int max=(a>b)?a:b;
		
		System.out.println("Greatest of two numbers is ="+max);
	}
}

Q) Write a java program to find out greatest of three numbers?

import java.util.Scanner;
class Test  
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first number :");
		int a=sc.nextInt();  // 20
		
		System.out.println("Enter the second number :");
		int b=sc.nextInt();  // 30
		
		System.out.println("Enter the third number :");
		int c=sc.nextInt();  // 6
		
		int max=(a>b)?((a>c)?a:c):((b>c)?b:c);
		
		System.out.println("Greatest of three numbers is ="+max);
	}
}


3) Logical operators 
---------------------

Logical AND operator (&&)
-------------------------
Logical AND operator deals with boolean values either true or false.

Truth table
-----------
T	T	= T
T	F	= F 
F	T	= F 
F 	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(true && true); //true 
		System.out.println(true && false);//false 
		System.out.println(false && true);//false 
		System.out.println(false && false); //false 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>2) && (6<10);
		
		System.out.println(b); // true 
	}
}

ex:
---

class Test  
{
	public static void main(String[] args) 
	{
		boolean b= (5>20) && (6<1);
		
		System.out.println(b); // false
	}
}

Logical OR operator (||)
------------------------
Logical OR operator deals with boolean values either true or false.

truth table
-----------
T	T	= T
T	F	= T
F	T	= T 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{	
		System.out.println(true || true); //true
		System.out.println(true || false); //true
		System.out.println(false || true); //true
		System.out.println(false || false); //false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b=(5>2) || (6<1);
		
		System.out.println(b); // true 
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		boolean b=(5>10) || (7<3);
		
		System.out.println(b); // false  
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{	
		boolean b = (5>2) && (6<3) || (67>5);
		System.out.println(b);// true
	}
}


Logical NOT operator (!)
------------------------
Logical NOT operator deals with boolean values either true or false.

ex:
---
class Test  
{
	public static void main(String[] args) 
	{	
		boolean b = !(5>2);
		System.out.println(b);//false
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{	
		boolean b = !(5>20);
		System.out.println(b);//true
	}
}















How to convert decimal to binary number 
========================================

	10 - decimal number 
	1010 - binary number 

	2|10
         --- 0
	2|5
	 --- 1
	2|2
         --- 0		^
	  1 		|
	-----------------
	1010



How to convert binary to decimal number 
========================================

	1010 - binary number 
	10 - decimal number 

	1 0 1 0
		<----

	0*1 + 1*2 + 0*4 + 1*8  

	0  +  2 + 0 + 8  = 10













