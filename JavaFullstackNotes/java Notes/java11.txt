4) Bitwise operators 
=====================

Bitwise AND operator (&)
-------------------------
Bitwise AND operator deals with binary numbers.

Truth table
-----------
T	T	= T
T	F	= F
F	T	= F 
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10, b=15;
		
		int c = a & b;
		
		System.out.println(c); //10
	}
}
/*
	10 - 1010
	15 - 1111	
    ----------
	&  - 1010
			  <---
	0*1  +  1*2  +  0*4  +  1*8
	
	 0 + 2 + 0 + 8  =10
*/

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10, b=5;
		
		int c = a & b;
		
		System.out.println(c); //0
	}
}
/*
	10 - 1010
	5  - 0101
    ----------
	&  - 0000
			 
*/

Bitwise OR operator (|)
------------------------
Bitwise OR operator deals with binary numbers.

Truth table
------------
T	T	= T
T	F 	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10, b=5;
		
		int c = a | b;
		
		System.out.println(c); // 15
	}
}
/*
	10 - 1010
	5  - 0101
    ----------
	| -  1111
			 <---
			 
	1*1 + 1*2 + 1*4 + 1*8		 
	
	1 + 2 + 4 + 8 = 15
*/


Bitwise XOR operator (^)
-----------------------
Bitwise XOR operator deals with binary numbers.

Truth table
-----------
T	T	= F
T	F	= T
F	T	= T
F	F	= F 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int a=10, b=15;
		
		int c = a ^ b;
		
		System.out.println(c); // 5
	}
}
/*
	10 - 1010
	15 - 1111
	----------
	^  - 0101
			 <---
	1*1  +  0*2  +  1*4  +  0*8
	
	1 + 0 + 4 + 0 = 5
*/


Bitwise NOT operator (~)
------------------------
ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= ~10;
		
		System.out.println(i); // -11 
	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i= ~24;
		
		System.out.println(i); // -25
	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i= ~(-10);
		
		System.out.println(i); // 9
	}
}

5) Arithmetic operators
=======================
% - modules
/ - division 
* - multiplication 
+ - addition 
- - subtraction 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 5+6%3+7*2+10%30+7/2+8+10/40+6-20; 	
		System.out.println(i); // 26
	}
}
/*
	5 +  6%3  +  7*2  +  10%30  +  7/2  +  8  + 10/40 +  6  -  20
	
	5 +  0  +   14  +   10    +  3  +   8  + 0   + 6 - 20
	
	46 - 20
	
	26

*/


6) Relational operators
-----------------------
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10 > 20); // false 
		
		System.out.println(10 >= 20); // false 
		
		System.out.println(10 < 20); // true 
		
		System.out.println(10 <= 10); // true 
		
		System.out.println(10 == 10); // true 
		
		System.out.println(10 == 20); // false 
		
		System.out.println( 10 != 10); // false 
		
		System.out.println(10 != 20); //true 
 	}
}

7) Shift operators 
====================

Right shift operator (>>)
-------------------------
10 >> 1  = 10/2 

10 >> 2  = 10/4

10 >> 3  = 10/8

10 >> 4  = 10/16

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10 >> 3;
		
		System.out.println(i); // 1
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 100 >> 5;
		
		System.out.println(i); // 100/32 = 3
 	}
}


Left shift operator (<<)
-------------------------
10 << 1  = 10*2 

10 << 2  = 10*4

10 << 3  = 10*8

10 << 4  = 10*16

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10 << 4; 
		
		System.out.println(i); // 10 * 16  = 160
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 100 << 2;
		
		System.out.println(i); // 100 << 4 = 400
 	}
}


8) Unary operators
==================

Increment/Decrement operators(++/--)
------------------------------------
We have two types of increment operators.

1) post increment 
	ex:
		i++;

2) pre increment 
	ex:
		++i;



We have two types of decrement operators.

1) post decrement
	ex:
		i--;

2) pre decrement
	ex:
		--i;


POST Increment/Decrement operators
----------------------------------
Rule1 : First Take 
Rule2 : Then Change 


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
		
		i++;
		
		System.out.println(i); // 11
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
	
		System.out.println(i++); // 10
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
		
		int j = i++;
	
		System.out.println(i+" "+j); // 11    10
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
		
		int j = i++ + i++; //10 + 11
	
		System.out.println(i+" "+j); // 12   21
 	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
		
		int j = i-- + i--; // 10 + 9 
	
		System.out.println(i+" "+j); // 8  19
 	}
}






PRE Increment/Decrement operators
----------------------------------
Rule1 : First Change
Rule2 : Then Take

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
		
		++i;
	
		System.out.println(i); // 11
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
	
		System.out.println(++i); // 11
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
	
		int j= ++i;
	
		System.out.println(i+" "+j); // 11   11
 	}
}

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
	
		int j= ++i + ++i; // 11 + 12
	
		System.out.println(i+" "+j); //  12   23
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i = 10;
	
		int j= --i + --i + --i; // 9 + 8 + 7 
	
		System.out.println(i+" "+j); // 7  24
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		byte b=127;
		
		b++;
		
		System.out.println(b);// - 128
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int g=5;
		
		g++;
		
		System.out.println(10 * g++);// 10 * 6
 	}
}

ex:
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		System.out.println(++(i++));// C.T.E 
 	}
}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		int i=10;
		
		System.out.println(i++ + ++i);// 10 + 12 = 22
 	}
}











































 
