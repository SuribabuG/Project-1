Inheritance
============
Inheritance is a mechanism in which we derived a class in the presence of existing class.

Inheritance is a mechanism in which one class will inherit the properties of another class.

The main object of inheritance is to achieve reusability.

Diagram: java25.1

Using "extends" keyword we can implements inheritance.

In java, we have five types of inheritance.


1) Single Level inheritance

2) Multi level inheritance 

3) Multiple inheritance

4) Hierarchical inheritance 

5) Hybrid inheritance 


1) Single Level inheritance
----------------------------
If we derived a class in the present of one base class is called single level inheritance.

Diagram:
		A (Parent / Base / Super class)
		|
		|
		|
		B (Child / Sub / Derived class)

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
	}
}

ex:
---
class A 
{
	int i=10;
}
class B extends A 
{
	int j=20;	
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		System.out.println(a.i); //10
		
		B b=new B();
		System.out.println(b.i+" "+b.j);//10   20
		
	}
}


2) Multi level inheritance
---------------------------
If we derived a class in the presence of one base class and that class is derived from another base class is called multi level inheritance.

Diag:
		A 
		|
		|
		|
		B
		|
		|
		|
		C 

ex:

class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends B
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m2();
		c.m3();
		
	}
}


3) Multiple inheritance 
-----------------------
In java, we can't extends more then one class simulteneously because java does not support multiple inheritance.
ex:
	class A 
	{
	}
	class B 
	{
	}
	class C extends A,B  --> invalid 
	{
	} 

Interface can extends more then one interface.Hence we can achieve multiple inheritance concept through interfaces.
ex:
	interface A 
	{
	}
	interface B 
	{
	}
	interface C extends A,B
	{
	}

If our class does not extends any other class then it is a direct child class of Object class.

ex:				diag:

	class A 			Object	
	{				|
					|
	}				A 

If our class extends some other class then our class is a indirect child class of Object class.

ex:				diag:
					
	class A 			Object
	{				|
					|
	}				|
	class B extends A 		A 		
	{				|
					|
	}				|
					B
 
Java does not support cyclic inheritance.
ex:
	class A extends B 
	{
	}
	class B extends A 
	{
	}



Q) Why Java does not support multiple inheritance?

There is a chance of raising ambiguity problem that's why java does not support multiple inheritance.

Diagram:
			p1.m1()					p2.m1()
			|---------------------------------------------|
						|
						c.m1();


4) Hierarchical inheritance 
---------------------------
If we derived multiple classes by using one base class is called hierarchical inheritance.

Diag:
				A
				|
		|-------------------------------|
		B				C

ex:
---
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class C extends A
{
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
		
		B b=new B();
		b.m1();
		b.m2();
		
		C c=new C();
		c.m1();
		c.m3();
		
	}
} 

5) Hybrid inheritance
------------------------
Hybrid inheritance is a combination of more then one inheritance.

Java does not support hybrid inheritance.

Diag:
				A
				|
		|-------------------------------|
		B				C
		|-------------------------------|
				|
				D 
		


Has-A relationship
===================
Has-A relationship is also known as composition and aggregation.

There is no specific keyword to implements Has-A relationship but mostly we will use new operator.

The main objective of Has-A relationship is to provide reusability.

Has-A relationship will increase dependency between two components.

ex:
----
	class Engine 
	{
		-
		- //engine specific functionality 
		-
	}
	class Car 
	{
		Engine e=new Engine();
		-
		-
	}

ex:
---
class Ihub
{
	public String courseName()
	{
		return "Full Stack Java Development";
	}
	public double courseFee()
	{
		return  30000d;
	}
	public String trainerName()
	{
		return "Niyaz Sir";
	}
}
class Usha
{
	public void getCourseDetails()
	{
		Ihub i=new Ihub();
		System.out.println("Course Name :"+i.courseName());
		System.out.println("Course Fee :"+i.courseFee());
		System.out.println("Trainer Name :"+i.trainerName());
	}
}
class Student
{
	public static void main(String[] args)
	{
		Usha u=new Usha();
		u.getCourseDetails();
	}
}

Composition 
===========
Without existing container object there is no chance of having contained object then the relationship between container and contained object is called composition which is strongly association.

Diagram: java25.2


Aggregation 
===========
Without existing container object there is a chance of having contained object then the relationship between container and contained object is called aggregation which is loosely association.

Diagram: java25.3




































 