Sequences
===========
Sequence is an object which is used to generate the numbers.

Sequence starts with 1 and increment by 1.

syntax:
------
	create sequence <sequence_name> start with <value> increment by <value>;

ex:
	create sequence sq1 start with 1 increment by 1;

	create sequence sq2 start with 10 increment by 10;

	create sequence sq3 start with 101 increment by 1;

We have two pseudo in sequence.

1) NEXTVAL
---------
	It will return next number in a sequence.
	ex:
		drop table student;

		create sequence sq1 start with 101 increment by 1;

		create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

		insert into student values(sq1.NEXTVAL,'raja','hyd');

		insert into student values(sq1.NEXTVAL,'ravi','delhi');

		insert into student values(sq1.NEXTVAL,'ramana','ramana');

		commit;

2) CURRVAL 
---------
	It will return the last number generated by the sequence.
	ex:
		select sq1.CURRVAL from dual;


Q) Write a query to see the list of sequences present in database?

	select sequence_name from user_sequences;


Q) Write a query to drop the sequence?

	drop sequence sq1;


Synonym
===========
Alternate name given to a table is called synonym.

Using snonym length of the table will reduce.

We can use synonym instead of table name for all the commands.

syntax:
-----
	create synonym <synonym_name> for <object_name>;

ex:
	create synonym syn1 for emp;
	create synonym syn2 for student;
	create synonym syn3 for dept;


	select * from syn1;

	delete from syn1;

	select * from emp; //no rows selected 

	rollback;

	select * from emp; //6 records 
	select * from syn1;

Q) Write a query to display list of synonms present in database?

	select synonym_name from user_synonyms;


Q) Write a query to drop the synonym?

	drop synonym syn1;



Joins
=======
select * from dept; // 4 records 

select * from emp; // 6 records 

select * from emp,dept;  // 6*4=24 records 

select eid,ename,esal,deptno,dname,dloc from emp,dept; --column ambiguously defined 

To overcome this limitation we need to declare table_name.column_name.

select emp.eid,emp.ename,dept.deptno,dept.dname,dept.dloc from emp,dept; // 6*4=24 records 


Table alias
-----------
A userdefined name given to a table is called table alias.

Table alias is temperory.

Once the query is executed we will loss the table alias.

Using table alias length of the query will reduce mean while performance is maintained.

ex:
	select e.eid,e.ename,e.esal,d.deptno,d.dname,d.dloc from emp e,dept d;	// 6*4 = 24 records


Definition of joins
------------------
Joins is used to retrieve the data from one or more then one table.

We have following list of joins.

1) Equi join

2) Non-Equi join 

3) Self join 

4) Cartisian product 

5) Inner join 

6) Outer join 


1) Equi join
-------------
When two tables are joined based on common column then we need to use equi join.

In equi join we will use join operator.

ex:

	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d
	where(e.deptno=d.deptno); //6


2) Non-Equi join 
---------------
When tables are not joined based on equi join operator is called non-equi join.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d
	where e.esal>30000 and e.esal<50000; // 1 * 4 = 4 records 


3) Self join 
-----------
When table joined to itself is called self join.

In self join we need to create two table alias for same.

ex:
	select e1.eid,e1.ename,e1.esal,e2.job,e2.comm from emp e1,emp e2
	where(e1.deptno=e2.deptno);  // 6 + 6 =12 records 

4) Cartisian product 
------------------
When two tables are joined without any condition is called cartisian product.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e,dept d;//6*4=24 records	

5) Inner join 
-----------
It is similar to equi join.

Inner join given by ANSI people.

ANSI stands for American National Standards Insitute.

ex:
	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e INNER JOIN dept d
	ON(e.deptno=d.deptno); //6

	select e.eid,e.ename,e.esal,d.dname,d.dloc from emp e JOIN dept d
	ON(e.deptno=d.deptno); //6


6) Outer join
-------------
It is a extension of equi join.

It will return matching as well as not matching records.

A '+' symbol denoted as outer join operator.

We have three types of outer join.

1) Left Outer join
----------------
	SQL
	---
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e,dept d
		where(e.deptno=d.deptno(+));
	ANSI
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e LEFT OUTER JOIN dept d
		ON(e.deptno=d.deptno);

2) Right Outer join 
------------------
	SQL
	---
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc from emp e,dept d
		where(e.deptno(+)=d.deptno);
	ANSI
	----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e RIGHT OUTER JOIN dept d
		ON(e.deptno=d.deptno);

3) Full Outer join 
--------------------
	ANSI
	-----
		select e.eid,e.ename,e.esal,e.deptno,d.deptno,d.dname,d.dloc 
		from emp e FULL OUTER JOIN dept d
		ON(e.deptno=d.deptno);



What is the difference between RDBMS and MongoDB database? 
 
RDBMS 						MongoDB 
-------------					---------
It is a relational database. 			It is a non-relational or document based  database.
 
It canâ€™t stores the data in key and value pair. It stores the data in key and value pair. 

Not suitable for hierarchical data storage. 	Suitable for hierarchical data storage. 

It has a predefined(static) schema. 		It has a dynamic schema. 

It contains tables. 				It contains Collections. 

It is a row based. 				It is a document based. 

It is a column based. 				It is a field based. 

It is slower. 					It is faster. 

It supports SQL query language. 		It supports JSON query language.


Assignment
===========
Input:
	AABBBCCCCAABB
	
output:
	A2B3C4A2B2 




















































































































